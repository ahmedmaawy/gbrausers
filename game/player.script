local input = require "ludobits.m.input"
local broadcast = require "ludobits.m.broadcast"

local CAMERA_OFFSET = vmath.vector3(-320, -288, 0)

local COLLISION_RESPONSE = hash("collision_response")
local GROUP_GROUND = hash("ground")
local GROUP_ENEMYBULLET = hash("enemybullet")


local UP = hash("up")
local LEFT = hash("left")
local RIGHT = hash("right")
local FIRE = hash("fire")

local MAX_HEIGHT = 400
local MAX_WIDTH = 3500

local MAX_SPEED = 200
local MAX_BULLET_SPEED = 300
local MIN_SPEED = 50
local ROTATION_ACCELERATION = math.rad(380)
local MAX_ROTATION_SPEED = math.rad(300)
local TURN_DECELERATION = 50	-- when turning
local DECELERATION = 250		-- when not thrusting
local ACCELERATION = 175
local GRAVITY = vmath.vector3(0, -75, 0)
local RATE_OF_FIRE = 0.15


local UNITVECTOR_Z = vmath.vector3(0, 0, 1)
local UNITVECTOR_UP = vmath.vector3(0, 1, 0)


local function take_damage(self, amount)
	self.health = self.health - amount
	if self.health <= 0 then
		broadcast.send("player_death")
	else
		broadcast.send("update_health", { health = self.health })
	end
end


local function dampen(value, amount, dt)
	local diff = math.abs(value) - math.abs(value * amount)
	if value < 0 then
		return math.min(0, value + (diff * dt))
	else
		return math.max(0, value - (diff * dt))
	end
end


function init(self)
	msg.post("camera", "acquire_camera_focus")
	msg.post("@render:", "use_fixed_projection", { zoom = 4 })
	
	input.acquire()
	self.direction = vmath.vector3()
	self.speed = MAX_SPEED
	self.rotation_speed = 0
	self.acceleration = 0
	self.gravity = vmath.vector3(0, 0, 0)
	self.camera_offset = vmath.vector3()
	self.fire_timeout = 0
	self.health = 10
	self.score = 0
	
	broadcast.send("update_health", { health = self.health })
	broadcast.send("update_score", { score = self.score })
	broadcast.register("enemyplane_death", function()
		self.score = self.score + 100
		broadcast.send("update_score", { score = self.score })
	end)
end

function final(self)
	input.release()
	broadcast.unregister("enemyplane_death")
end

function update(self, dt)
	local pos = go.get_position()
	
	if input.is_pressed(LEFT) then
		if self.rotation_speed < 0 then
			self.rotation_speed = -self.rotation_speed * 0.8
		end
		self.rotation_speed = math.min(self.rotation_speed + ROTATION_ACCELERATION * dt, MAX_ROTATION_SPEED)
		self.speed = math.max(self.speed - TURN_DECELERATION * dt, MIN_SPEED)
	elseif input.is_pressed(RIGHT) then
		if self.rotation_speed > 0 then
			self.rotation_speed = -self.rotation_speed * 0.8
		end
		self.rotation_speed = math.max(self.rotation_speed - ROTATION_ACCELERATION * dt, -MAX_ROTATION_SPEED)
		self.speed = math.max(self.speed - TURN_DECELERATION * dt, MIN_SPEED)
	else
		self.rotation_speed = self.rotation_speed * 0.9
	end

	if input.is_pressed(UP) then
		self.speed = math.min(self.speed + ACCELERATION * dt, MAX_SPEED)
		broadcast.send("thrusting")
		self.gravity.y = dampen(self.gravity.y, 0.1, dt)
	else
		self.speed = math.max(self.speed - DECELERATION * dt, MIN_SPEED)
		broadcast.send("not_thrusting")
		self.gravity = self.gravity + GRAVITY * dt
	end
	
	if input.is_pressed(FIRE) then
		self.fire_timeout = self.fire_timeout - dt
		if self.fire_timeout <= 0 then
			factory.create("#bulletfactory", go.get_world_position(), go.get_rotation(), { speed = MAX_BULLET_SPEED })
			self.fire_timeout = RATE_OF_FIRE
		end
	else
		self.fire_timeout = 0
	end
	
	-- update rotation
	local q = vmath.quat_axis_angle(UNITVECTOR_Z, self.rotation_speed * dt)
	go.set_rotation(go.get_rotation() * q)
	
	-- move forward and limit horizontally
	local pos = go.get_position()
	local distance = self.speed * dt
	local direction = vmath.rotate(go.get_rotation(), UNITVECTOR_UP) * distance
	if pos.x > MAX_WIDTH then
		direction.x = direction.x - (pos.x - MAX_WIDTH) * dt
	elseif pos.x < -MAX_WIDTH then
		direction.x = direction.x - (pos.x + MAX_WIDTH) * dt
	end
	pos = pos + direction
	
	-- apply gravity and limit height
	local vertical_limit = vmath.vector3(0, math.min(0, MAX_HEIGHT - pos.y), 0)
	self.gravity = self.gravity + vertical_limit * dt
	pos = pos + self.gravity * dt

	go.set_position(pos)
	
	-- adjust camera
	local target_offset = vmath.rotate(go.get_rotation(), UNITVECTOR_UP) * distance * 15
	self.camera_offset = self.camera_offset + (target_offset - self.camera_offset) * dt
	go.set_position(pos + self.camera_offset + CAMERA_OFFSET, "camera")
end

function on_message(self, message_id, message, sender)
	broadcast.on_message(message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if message.group == GROUP_GROUND then
			take_damage(self, self.health)
		elseif message.group == GROUP_ENEMYBULLET then
			take_damage(self, 1)
			go.delete(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
end

function on_reload(self)
end
